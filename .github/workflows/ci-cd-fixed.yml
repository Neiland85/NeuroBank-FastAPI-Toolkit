# Workflow alternativo para casos de emergencia o testing
name: CI/CD Pipeline - Fixed

on:
  workflow_dispatch:
    inputs:
      skip_tests:
        description: '¿Saltar tests? (solo para emergencias)'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      force_deploy:
        description: '¿Forzar deployment?'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

# Permisos necesarios para AWS OIDC
permissions:
  id-token: write   # Para AWS OIDC authentication
  contents: read    # Para hacer checkout del código

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: neurobank-fastapi
  AWS_ACCOUNT_ID: 120242956739
  AWS_ROLE_ARN: arn:aws:iam::120242956739:role/GitHubActionsOIDCRole

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  security:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json --skip B101 || true
    
    - name: Run Safety vulnerability scan
      run: |
        pip freeze > current-requirements.txt
        safety scan --json --output safety-report.json --continue-on-error || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-fixed
        path: |
          bandit-report.json
          safety-report.json

  build-and-deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.event.inputs.force_deploy == 'true' &&
      (github.event.inputs.skip_tests == 'true' || 
       (needs.test.result == 'success' && needs.security.result == 'success'))
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Emergency deployment warning
      if: github.event.inputs.skip_tests == 'true'
      run: |
        echo "⚠️  WARNING: EMERGENCY DEPLOYMENT MODE"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🚨 Tests have been SKIPPED!"
        echo "🚨 This should only be used in emergency situations!"
        echo "🚨 Make sure to run full testing after deployment!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Fixed-${{ github.run_id }}
    
    - name: Verify AWS connection
      run: |
        echo "🔍 Verifying AWS OIDC connection..."
        aws sts get-caller-identity
        echo "✅ AWS connection verified!"
    
    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: fixed-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to AWS Lambda
      run: |
        sam build --region ${{ env.AWS_REGION }}
        sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
          --stack-name neurobank-api-fixed \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides ApiKey=${{ secrets.API_KEY || 'emergency-deploy-key' }}
        echo "🎉 Emergency deployment completed!"